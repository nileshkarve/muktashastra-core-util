package in.muktashastra.core.persistence.util;

import in.muktashastra.core.exception.CoreException;
import in.muktashastra.core.persistence.Status;
import lombok.Getter;
import lombok.NonNull;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class EntityMetadata {

    @Getter
    private final Class<?> type;
    @Getter
    private final String tableName;
    @Getter
    private final QueryMetadata insertQueryMetadata;
    @Getter
    private final QueryMetadata updateQueryMetadata;
    @Getter
    private final QueryMetadata deleteQueryMetadata;
    @Getter
    private final QueryMetadata selectQueryMetadata;

    private final Map<String, FieldMetadata> columnMetadataMap;

    public static EntityMetadata generate(@NonNull Class<?> type, @NonNull String tableName, @NonNull List<FieldMetadata> fieldMetaData) throws CoreException {
        Map<String, FieldMetadata> columnMetadataMap = fieldMetaData.stream().collect(Collectors.toMap(FieldMetadata::columnName, field -> field, (a, b) -> a));
        return new EntityMetadata(type, tableName, columnMetadataMap);
    }

    public String getPrimaryKeyColumn() {
        return columnMetadataMap.values().stream().filter(FieldMetadata::primaryKey).map(FieldMetadata::columnName).findFirst().orElse(null);
    }

    public String getPrimaryKeyFieldName() {
        return columnMetadataMap.values().stream().filter(FieldMetadata::primaryKey).map(fieldMetadata -> fieldMetadata.field().getName()).findFirst().orElse(null);
    }

    public FieldMetadata getFieldMetadata(String columnName) {
        return columnMetadataMap.get(columnName);
    }

    public List<FieldMetadata> getFieldMetadataList() {
        return new ArrayList<>(columnMetadataMap.values());
    }

    private EntityMetadata(Class<?> type, String tableName, Map<String, FieldMetadata> columnMetadataMap) throws CoreException {
        this.type = type;
        this.tableName = tableName;
        this.columnMetadataMap = columnMetadataMap;
        this.insertQueryMetadata = new InsertQueryMetadata(tableName, columnMetadataMap);
        this.updateQueryMetadata = new UpdateQueryMetadata(tableName, columnMetadataMap);
        this.deleteQueryMetadata = new DeleteQueryMetadata(tableName, columnMetadataMap);
        this.selectQueryMetadata = new SelectQueryMetadata(tableName, columnMetadataMap);
    }

    public interface QueryMetadata {
        String getQuery();
        int getNumberOfParameters();
        Map<Integer, String> getPreparedStatementParamIndexColumnNameMap();
        default String getPreparedStatementParamAtIndex(int index) {
            return getPreparedStatementParamIndexColumnNameMap().get(index);
        }
    }

    @Getter
    public static class InsertQueryMetadata implements QueryMetadata {
        private final String query;
        private final Map<Integer, String> preparedStatementParamIndexColumnNameMap = new HashMap<>();
        private InsertQueryMetadata(String tableName, Map<String, FieldMetadata> columnMetadataMap) {
            StringBuilder builder = new StringBuilder();
            int indexCounter = 1;
            for(FieldMetadata field : columnMetadataMap.values()) {
                if(field.autoGenerated())
                    continue;
                if(!builder.isEmpty()) {
                    builder.append(", ");
                }
                builder.append(field.columnName());
                this.preparedStatementParamIndexColumnNameMap.put(indexCounter, field.columnName());
                indexCounter++;
            }
            String placeholders = String.join(", ", Collections.nCopies(preparedStatementParamIndexColumnNameMap.size(), "?"));
            this.query = String.format("INSERT INTO %s (%s) VALUES (%s)", tableName, builder, placeholders);
        }
        public int getNumberOfParameters() {
            return this.preparedStatementParamIndexColumnNameMap.size();
        }
    }

    @Getter
    public static class UpdateQueryMetadata implements QueryMetadata {
        private final String query;
        private final Map<Integer, String> preparedStatementParamIndexColumnNameMap = new HashMap<>();
        private UpdateQueryMetadata(String tableName, Map<String, FieldMetadata> columnMetadataMap) throws CoreException {
            StringBuilder builder = new StringBuilder();
            int indexCounter = 1;
            for(FieldMetadata field : columnMetadataMap.values()) {
                if(field.primaryKey())
                    continue;
                if(!builder.isEmpty()) {
                    builder.append(", ");
                }
                builder.append(field.columnName()).append(" = ?");
                this.preparedStatementParamIndexColumnNameMap.put(indexCounter, field.columnName());
                indexCounter++;
            }
            String primaryKeyColumnName = columnMetadataMap.values().stream().filter(FieldMetadata::primaryKey).findFirst().map(FieldMetadata::columnName).orElseThrow(() -> new CoreException("Unable to find primary key column in table name : " + tableName));
            this.query = String.format("UPDATE %s SET %s WHERE %s = ?", tableName, builder, primaryKeyColumnName);
            this.preparedStatementParamIndexColumnNameMap.put(indexCounter, primaryKeyColumnName);
        }
        public int getNumberOfParameters() {
            return this.preparedStatementParamIndexColumnNameMap.size();
        }
    }

    @Getter
    public static class DeleteQueryMetadata implements QueryMetadata {
        private final String query;
        private final Map<Integer, String> preparedStatementParamIndexColumnNameMap = new HashMap<>();
        private DeleteQueryMetadata(String tableName, Map<String, FieldMetadata> columnMetadataMap) throws CoreException {
            String statusColumn = columnMetadataMap.values().stream().filter(FieldMetadata::statusColum).findFirst().map(FieldMetadata::columnName).orElseThrow(() -> new CoreException("Unable to find status column in entity in table name : " + tableName));
            String primaryKeyColumnName = columnMetadataMap.values().stream().filter(FieldMetadata::primaryKey).findFirst().map(FieldMetadata::columnName).orElseThrow(() -> new CoreException("Unable to find primary key column in table name : " + tableName));
            this.query = String.format("UPDATE %s SET %s = '%s' WHERE %s = ?", tableName, statusColumn, Status.DELETED.name(), primaryKeyColumnName);
            this.preparedStatementParamIndexColumnNameMap.put(1, primaryKeyColumnName);
        }
        public int getNumberOfParameters() {
            return this.preparedStatementParamIndexColumnNameMap.size();
        }
    }

    @Getter
    public static class SelectQueryMetadata implements QueryMetadata {
        private final String query;
        private final Map<Integer, String> preparedStatementParamIndexColumnNameMap = new HashMap<>();
        private SelectQueryMetadata(String tableName, Map<String, FieldMetadata> columnMetadataMap) {
            StringBuilder builder = new StringBuilder();
            int indexCounter = 1;
            for(FieldMetadata field : columnMetadataMap.values()) {
                if(!builder.isEmpty()) {
                    builder.append(", ");
                }
                builder.append(field.columnName()).append(" AS ").append(field.field().getName());
                this.preparedStatementParamIndexColumnNameMap.put(indexCounter, field.columnName());
                indexCounter++;
            }
            this.query = String.format("SELECT %s FROM %s", builder, tableName);
        }
        public int getNumberOfParameters() {
            return 0;
        }
    }

    public record FieldMetadata(Field field, String columnName, JavaConversionType javaConversionType, boolean nullable, boolean autoGenerated, boolean primaryKey, boolean statusColum, int indexSequenceNumber) {}
}
