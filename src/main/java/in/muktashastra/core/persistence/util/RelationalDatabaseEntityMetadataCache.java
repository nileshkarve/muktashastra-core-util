package in.muktashastra.core.persistence.util;

import in.muktashastra.core.exception.CoreException;
import in.muktashastra.core.persistence.annotation.DatabaseColumn;
import in.muktashastra.core.persistence.annotation.RelationalDatabaseEntity;
import lombok.NonNull;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class RelationalDatabaseEntityMetadataCache {

    private static final Map<String, EntityMetadata> entityFieldCache = new ConcurrentHashMap<>();

    public static void loadEntityMetaData(@NonNull Class<?> clazz) throws CoreException {
        entityFieldCache.put(clazz.getSimpleName(), generateEntityMetaData(clazz));
    }

    public static EntityMetadata getEntityMetaData(@NonNull String entityName) {
        return entityFieldCache.get(entityName);
    }

    private static EntityMetadata generateEntityMetaData(Class<?> clazz) throws CoreException {
        String tableName = extractTableName(clazz);
        List<EntityMetadata.FieldMetadata> fieldMetadata = extractFieldMetadata(clazz.getDeclaredFields());
        return EntityMetadata.generate(clazz, tableName, fieldMetadata);
    }

    private static List<EntityMetadata.FieldMetadata> extractFieldMetadata(Field[] declaredFields) {
        List<EntityMetadata.FieldMetadata> fieldMetadata = new ArrayList<>();
        for(Field field : declaredFields) {
            DatabaseColumn column = field.getAnnotation(DatabaseColumn.class);
            if(column == null) continue;
            field.setAccessible(true);
            fieldMetadata.add(new EntityMetadata.FieldMetadata(field, column.name(), column.javaConversionType(), column.nullable(), column.autoGenerated(), column.primaryKey(), column.statusColum(), column.indexSequenceNumber()));
        }
        return fieldMetadata;
    }

    private static String extractTableName(Class<?> clazz) {
        if (!clazz.isAnnotationPresent(RelationalDatabaseEntity.class)) {
            throw new IllegalArgumentException("Class not annotated with @RelationalDatabaseEntity: " + clazz.getName());
        }
        RelationalDatabaseEntity entity = clazz.getAnnotation(RelationalDatabaseEntity.class);
        return entity.tableName();
    }
}