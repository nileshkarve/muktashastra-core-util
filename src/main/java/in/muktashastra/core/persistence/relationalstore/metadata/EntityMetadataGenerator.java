package in.muktashastra.core.persistence.relationalstore.metadata;

import in.muktashastra.core.exception.CoreException;
import in.muktashastra.core.persistence.relationalstore.annotation.DatabaseColumn;
import in.muktashastra.core.persistence.relationalstore.annotation.RelationalDatabaseEntity;
import lombok.NonNull;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public final class EntityMetadataGenerator {

    private EntityMetadataGenerator(){}

    public static EntityMetadata generate(@NonNull Class<?> entityClass) throws CoreException {
        List<FieldMetadata> fieldMetadata = extractFieldMetadata(entityClass.getDeclaredFields());
        Map<String, FieldMetadata> columnMetadataMap = fieldMetadata.stream().collect(Collectors.toMap(FieldMetadata::columnName, field -> field, (a, b) -> a));
        Map<String, FieldMetadata> fieldMetadataMap = fieldMetadata.stream().collect(Collectors.toMap(metadata->metadata.field().getName(), field -> field, (a, b) -> a));
        return new EntityMetadata(entityClass, extractTableName(entityClass), columnMetadataMap, fieldMetadataMap);
    }

    private static List<FieldMetadata> extractFieldMetadata(Field[] declaredFields) {
        List<FieldMetadata> fieldMetadata = new ArrayList<>();
        for(Field field : declaredFields) {
            DatabaseColumn column = field.getAnnotation(DatabaseColumn.class);
            if(column == null) continue;
            field.setAccessible(true);
            fieldMetadata.add(new FieldMetadata(field, column.name(), column.javaConversionType(), column.nullable(), column.autoGenerated(), column.primaryKey(), column.statusColum(), column.indexSequenceNumber()));
        }
        return fieldMetadata;
    }

    private static String extractTableName(Class<?> clazz) {
        if (!clazz.isAnnotationPresent(RelationalDatabaseEntity.class)) {
            throw new IllegalArgumentException("Class not annotated with @RelationalDatabaseEntity: " + clazz.getName());
        }
        RelationalDatabaseEntity entity = clazz.getAnnotation(RelationalDatabaseEntity.class);
        return entity.tableName();
    }
}
